// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/nomkhonwaan/myblog/pkg/log (interfaces: Outputer)

// Package mock_log is a generated GoMock package.
package mock_log

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockOutputer is a mock of Outputer interface
type MockOutputer struct {
	ctrl     *gomock.Controller
	recorder *MockOutputerMockRecorder
}

// MockOutputerMockRecorder is the mock recorder for MockOutputer
type MockOutputerMockRecorder struct {
	mock *MockOutputer
}

// NewMockOutputer creates a new mock instance
func NewMockOutputer(ctrl *gomock.Controller) *MockOutputer {
	mock := &MockOutputer{ctrl: ctrl}
	mock.recorder = &MockOutputerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOutputer) EXPECT() *MockOutputerMockRecorder {
	return m.recorder
}

// Printf mocks base method
func (m *MockOutputer) Printf(arg0 string, arg1 ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf
func (mr *MockOutputerMockRecorder) Printf(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockOutputer)(nil).Printf), varargs...)
}
