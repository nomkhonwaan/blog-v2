// Code generated by bindata. DO NOT EDIT.
// sources:
// data/graphql-playground.html
// data/opengraph-template.html

package data

import (
	"fmt"
	"os"
	"strings"
	"time"
)

type gzipAsset struct {
	bytes []byte
	info  gzipFileInfoEx
}

type gzipFileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type gzipBindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi gzipBindataFileInfo) Name() string {
	return fi.name
}
func (fi gzipBindataFileInfo) Size() int64 {
	return fi.size
}
func (fi gzipBindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi gzipBindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi gzipBindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi gzipBindataFileInfo) IsDir() bool {
	return false
}
func (fi gzipBindataFileInfo) Sys() interface{} {
	return nil
}

var _gzipBindataDataGraphqlplaygroundhtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5c\x69\x6f\xdb\xb8\xd6\xfe\x9e\x5f\xc1\x57\x45\xd1\x14\x88\x68\x92" +
		"\xda\x3d\x76\xf0\xb6\x9d\xdc\xb4\x98\xcc\x9d\xce\x82\xf6\xce\xfd\xa6\x48\x94\xcd\x44\xa6\x5c\x89\xde\x3a\x98\xff" +
		"\x7e\x41\x52\x96\x17\x79\x91\x9d\x38\x13\xa0\x35\x90\x58\x3e\x3c\x3c\xcb\xf3\xf0\xc8\xa2\x68\xaa\xf3\x7f\x71\x16" +
		"\x89\xd9\x90\x82\xbe\x18\xa4\x97\x67\x67\x1d\xf9\x0e\xd2\x90\xf7\xba\x06\xe5\x86\x92\xd0\x30\xbe\x3c\x03\xa0\x33" +
		"\xa0\x22\x04\x51\x3f\xcc\x0b\x2a\xba\x23\x91\x98\x3e\x68\x2d\x1a\x78\x38\xa0\x5d\x63\xcc\xe8\x64\x98\xe5\xc2\x00" +
		"\x51\xc6\x05\xe5\xa2\x6b\x8c\x0a\x9a\x9b\x45\x14\xa6\xe1\x6d\x4a\xbb\x3c\xbb\x00\x8c\x33\xc1\xc2\x54\x09\x69\x17" +
		"\x43\x74\x01\x06\x8c\xb3\xc1\x68\xb0\x22\x0a\xa7\x35\x91\xd4\x0a\x53\x73\xc4\x0c\xe5\x58\x30\x91\xd2\xcb\xeb\x3c" +
		"\x1c\xf6\x7f\xbd\x01\x1f\xd3\x70\xd6\xcb\xb3\x11\x8f\x3b\x2d\xdd\x22\x75\x52\xc6\xef\x41\x4e\xd3\xae\x51\x88\x59" +
		"\x4a\x8b\x3e\xa5\xc2\x00\xfd\x9c\x26\x5d\xa3\xd5\x8a\x62\x0e\xef\x8a\x98\xa6\x6c\x9c\x43\x4e\x45\x8b\x0f\x07\xad" +
		"\x9e\x34\xf8\x25\x35\x87\x95\x41\x33\xa7\x61\x24\x5a\xb7\x23\x96\xc6\xad\x42\x84\x82\x45\xad\xa8\x28\x5a\x8c\xc7" +
		"\x74\x0a\xa3\xa2\x30\x4a\x28\x96\xbc\xf5\xb3\x5c\x44\x23\x01\x58\x94\xf1\x87\x39\x4c\xc2\xb1\x34\x02\x87\xbc\x37" +
		"\xf7\x53\x44\x39\x1b\x0a\x50\xe4\xd1\x03\xb3\xb8\x2b\x5a\x03\x16\xc7\x29\x9d\x84\x39\x85\x77\x85\x71\xd9\x69\x69" +
		"\xe3\x92\xfb\x96\x26\xff\xac\x73\x9b\xc5\xb3\xcb\xb3\x8e\x82\x10\xc8\x01\xd3\x35\x04\x9d\x0a\x09\x82\xa2\x42\x0d" +
		"\x9b\xbf\xce\x00\x00\x20\xc9\xb8\x30\x93\x70\xc0\xd2\x59\x1b\x18\xbf\x0c\x29\x07\xbf\x87\xbc\x30\x2e\x40\x11\xf2" +
		"\xc2\x2c\x68\xce\x92\x1f\x94\x66\x36\xa6\x79\x92\x66\x93\x36\xe8\xb3\x38\xa6\x5c\x4a\xff\x3e\x3b\x03\x40\x7a\x2b" +
		"\xad\x0d\xc2\xbc\xc7\x78\x1b\x20\xdd\xe5\x36\x8c\xee\x75\x32\x6d\xf0\x02\x7b\x24\xb4\xc2\xaa\x17\x5c\x64\xfa\x81" +
		"\x97\xdd\xcd\x09\xbd\xbd\x67\xc2\x0c\xe5\xc0\x11\x2c\xe3\x6d\xb0\xa2\x85\xa0\x53\x00\x1a\x16\xd4\xcc\x46\x02\x24" +
		"\x59\x3e\x09\xf3\xb8\xd0\xbe\x0e\xef\xa3\xc2\xf8\xff\xb9\xcf\x7b\x3a\x4b\xf2\x70\x40\x0b\xb0\x21\xb0\x24\xcf\x06" +
		"\xe5\x21\x00\xd9\x30\x8c\x98\x98\x55\x59\x2e\xe2\x16\x79\xc8\x8b\x24\xcb\x07\x6d\xa0\x0e\xd3\x50\xd0\x3f\xcf\x31" +
		"\x1a\x4e\x5f\x57\xaa\x83\xa2\x89\xda\x5e\x95\xbf\xd5\x7f\x91\xd5\xa3\xc2\xcd\xa2\x42\x0d\x42\x42\x7b\xe2\x41\x4b" +
		"\xc1\x68\x34\xbf\xa3\xf8\x50\x14\x3b\x2d\x55\xb6\xb2\x8c\xb7\xd6\x2f\x4c\xc2\x98\xfe\x32\x12\xdb\xcb\x66\xae\xd0" +
		"\xb0\x62\xf6\xab\x6f\x2b\x16\xd9\xf3\x71\x08\x36\x1b\x32\x6c\x36\xa0\xd8\x7c\xde\x1c\xaf\x56\xca\x77\x08\x8f\x84" +
		"\x70\xf3\x68\x5c\xd4\xc5\x66\x2c\xff\xa1\x90\x37\xe3\xf7\x0c\x88\xdd\x34\x1c\xbf\x63\x78\x0c\x86\xf5\xf1\x18\x0e" +
		"\x87\x34\xcc\x1f\xa7\xb8\x9b\x45\xbf\x3f\xf6\x67\x5f\xd6\xdf\xe1\x7b\xe4\xb3\xa2\x9a\x93\x6d\x46\x71\x43\x80\x4a" +
		"\x7b\x7b\x6c\xeb\xcd\x5b\x9b\x6a\xf0\x6c\xf5\x85\x77\xfb\xc2\xdb\x7d\xe1\x1d\x83\xe7\x5b\xca\xba\xce\x39\xe3\x9c" +
		"\xe6\x3f\xe6\xe1\xa4\x42\x00\xbd\xac\x62\x2a\x44\x9e\xdd\x53\x33\x0e\x8b\x7e\x96\x24\x05\x15\x6d\xe0\xa1\xe5\xf8" +
		"\x9d\xdd\xca\xd8\x5e\xd1\xc6\x68\xb7\x3a\xc1\x68\x3b\x4d\xcf\x3c\xd0\x3a\xb2\xd9\x48\x1c\x16\xb0\x7b\x48\x08\xd8" +
		"\x21\xdb\xb1\x7a\x6a\xd7\xb0\xff\xfe\xf3\xdd\xfd\x78\x6d\x9a\x51\x8d\x47\x33\xcb\x99\x9e\xee\x0f\xa7\xf2\x4f\xf7" +
		"\x5e\x19\xcd\x9b\x55\xf6\x59\xd8\x57\x9e\x3b\x8b\x73\x7b\xaf\xfa\x34\x69\x7e\x8e\x40\x90\x38\x05\x48\x19\xa7\x61" +
		"\x5e\x4d\x7b\xa4\x74\xed\x55\x9f\x39\x1d\x65\x41\x83\xdb\x7b\xf7\xe3\x2f\x5f\xe3\x6f\x17\x5c\xfb\xc1\xe0\x6e\xb4" +
		"\x50\x8e\xdc\xc1\xbb\x68\xca\xbe\x5d\x70\xdd\x07\x83\xbb\xd1\x82\x06\x97\xbe\x0f\x07\xbf\x7e\xc3\xe0\xfa\xab\xc8" +
		"\x58\x87\x83\xbb\xd1\x82\x06\xf7\x76\xd6\xef\x5d\x8f\xbe\x55\x70\x31\x44\xab\xd0\xe0\x43\xc1\xdd\x62\x41\x83\x9b" +
		"\xa6\x6f\x7e\xfa\xf8\xed\x62\x4b\x1e\x38\x70\xb7\x58\x28\x07\x6e\x2f\xfd\x70\xfd\xf3\x5e\x70\x5d\x7b\x38\x05\xc4" +
		"\xdf\x0d\xef\x9a\xd2\x7e\x2b\xcf\x04\xe2\x13\x5f\x32\xdc\x17\xd3\xdf\x3e\x7c\xd8\x0b\x71\xe0\xc0\xc0\x77\x10\x42" +
		"\x2e\x46\x96\x83\x1d\x77\x38\x05\xb6\x0b\x1d\x8c\x10\x42\x84\xf8\xbe\x8f\x7d\xcb\xdd\xcd\xc0\x61\x36\x1e\x1c\xc3" +
		"\xb3\xe1\xef\xa4\x57\x25\xd1\xe7\xfc\xed\xe0\xb6\x11\x7f\x1e\x76\x89\x4b\x7c\xec\x59\xbe\x1c\xe6\xc0\xb7\xa0\x1d" +
		"\x20\x84\xb0\xeb\xf9\xb6\xeb\xee\xa9\x9f\x43\x2c\x3c\xd0\xff\xb3\x61\xee\xa4\x97\x3c\x9f\xf9\xa8\xd8\x4f\x9c\x3a" +
		"\x2b\x61\x84\x61\xe0\x05\x41\xe0\x78\xc4\x73\xac\x00\xed\xa9\xb4\x3d\x9d\x0e\xf7\xf2\x6c\x18\x39\xed\x75\x52\xf2" +
		"\xf1\x4b\xb2\x97\x11\x8b\x40\x64\x05\x3e\xc1\x2e\xb1\x3d\xc7\xf1\xdd\x83\x4b\xe9\x10\x0b\x0f\xf4\xff\x4c\x88\x3b" +
		"\xf1\x35\x18\x8d\x7f\x7b\xf7\xc7\xbf\x9b\x31\x67\x39\x0e\xc1\xae\x1c\xe7\x3e\x72\x8e\xf8\x16\x3b\xd0\xc8\xc3\xa3" +
		"\x78\x36\x14\x92\x07\xd6\xde\xce\x4b\x3d\x76\x75\xfd\xe9\xf3\xfc\x1e\xd4\xfa\x9d\xf8\xa5\x5b\x4b\x61\x9e\x87\xb3" +
		"\xc5\x7d\xa8\x0d\x69\x2c\xdf\xd2\xda\xbc\xfa\x0c\x10\xb4\xd6\x5e\xc5\xc5\x62\x69\x00\x41\xdc\xb0\x53\x0d\x80\x27" +
		"\xf7\x5d\xcb\xdf\x64\x82\xe6\xfa\x28\xca\x46\x5c\xb4\x01\xbe\x98\xaf\x1e\x34\x50\x2a\x4f\x84\x45\x16\xc5\xd3\x27" +
		"\x23\xc3\x39\x06\x90\x5a\xa7\xe3\xc8\x78\x4c\xdf\xa7\x21\xe3\xee\xcd\x7f\xff\x33\xf8\xf8\x64\x64\x78\xab\xa9\xd9" +
		"\x8d\x00\xa9\x75\x3a\x8e\x8c\xc7\xf4\x7d\x1a\x32\xfa\xbf\xd3\x37\xf9\xd3\x55\x46\x70\xcc\xe8\xac\x75\x3a\x8e\x8c" +
		"\xc7\xf4\x7d\xa2\xd3\xd4\xa7\xde\x97\xeb\xfb\x27\x22\x03\x43\x7c\x38\x20\x1b\x3a\x1d\x43\xc6\xe3\xfa\x3e\x51\x65" +
		"\x5c\xfd\xeb\xcb\x5b\xf1\x64\x64\x58\xc7\x00\x52\xeb\x74\x1c\x19\x8f\xe9\xfb\x34\x64\xc4\x5f\xaf\x7e\x7a\xf7\x73" +
		"\x73\x32\xd0\x56\x32\x96\x17\x53\xe7\x99\x31\x5e\x4b\xce\x5d\x79\x79\x35\x44\xea\xd7\x82\xb5\x2e\x35\x2e\x9e\xda" +
		"\x75\x03\x2a\x18\x4f\x18\x67\x82\x36\x61\x64\x4d\x57\x13\xf3\xe3\x9f\xfc\xe3\x01\x5f\x1f\x0f\xe5\x65\xed\x42\x85" +
		"\x34\x00\xa7\xd6\xe5\x48\x5e\x1e\xcf\xf5\x53\xf0\xd2\xbf\xfb\x78\xf5\xe6\xd7\xa7\x23\xc6\x43\x2b\xaf\x26\xe8\xd4" +
		"\xba\x1c\x49\xcc\xe3\xb9\x7e\x02\x62\x5e\xa4\x59\x18\x33\xde\x33\x27\xb9\x0c\x32\x2f\x19\x1a\x66\x05\xd3\x39\x87" +
		"\xb7\x45\x96\x8e\x04\xd5\xd6\x27\x2c\x16\xfd\x36\xc0\x08\x8d\x27\x5a\xd2\xa7\xac\xd7\x17\x5a\xd4\xd7\xa2\x98\x15" +
		"\xc3\x54\xb2\x38\x8f\xff\x36\x9b\x6e\x69\x49\x52\x5a\x6b\x1a\x14\x4a\x5c\xef\xb4\x50\xae\x80\x49\x59\x4f\x25\x3a" +
		"\x28\xda\x20\xa2\x5c\xd0\x7c\x55\xe1\x36\x9b\x6a\xa5\xb5\xe6\xd2\xc7\xa6\xb6\x46\x36\x87\x61\x74\xbf\xb9\xf5\x6e" +
		"\x54\x08\x96\xcc\xcc\x72\x7b\xce\x16\xbf\xf5\xfe\xbb\xfb\x2d\xc1\x65\xc6\x2c\xa7\x91\x26\x27\xca\xd2\xd1\x80\xaf" +
		"\xd9\xde\xd2\xbe\xbd\xad\x5c\x67\xcb\x7a\xf3\x9f\x40\x95\x2c\x7b\xce\xfc\x1e\xc9\x9c\xe4\x85\x44\x6f\x1b\x31\x6f" +
		"\x33\x21\xb2\x41\x1b\x90\x6a\xe5\x6c\xbd\xb6\xb7\xfc\xd2\xbd\xf9\xd6\x90\xbd\xda\x3a\x7c\x41\xa7\x62\x79\x83\x4c" +
		"\xc1\xbe\xd2\x36\xb0\xc8\x3c\x2e\x25\x9c\x94\x79\x10\x54\x46\x27\x7b\x6d\x1a\x04\x51\x96\x66\x79\x1b\xe4\xbd\xdb" +
		"\xf0\x9c\x38\xce\x05\x58\xfc\x43\xd0\x7d\xfd\xcf\xa6\x1a\x5f\x27\xef\x93\x68\x39\xd9\x79\x5e\xb6\xce\x6b\x69\x4b" +
		"\x42\x27\x66\x63\xc0\xe2\xae\xb1\x56\xe7\x7a\x7f\x57\x31\xee\x81\x28\x0d\x8b\x42\xb6\xf7\x32\x03\x8c\x19\x9d\xbc" +
		"\xcd\xa6\x5d\x03\x01\x04\x30\xf1\xe5\x9f\x01\xa6\x83\x94\x17\xed\x69\xca\xf8\x7d\xd7\xe8\x0b\x31\x6c\xb7\x5a\x93" +
		"\xc9\x04\x4e\x2c\x98\xe5\xbd\x16\x0e\x82\xa0\xa5\x5a\x95\xd5\x1d\xfb\xc6\xc0\x4d\xd6\xcb\x96\x36\x8f\x01\xd0\x89" +
		"\x69\x52\xe8\x43\xbd\xbb\x8b\x86\xf9\x75\x1e\xc6\x8c\x72\xa1\xe3\x5e\x11\x99\xd8\x00\x53\xdc\x35\x6c\xe8\xbb\x2f" +
		"\x0d\x30\x25\x5d\x23\x70\x21\xc1\x2f\x0d\x30\xc3\x5d\x03\xc9\x77\x29\x0b\xa0\xeb\xbe\x34\xe6\x76\x65\xa6\x22\x1b" +
		"\x02\xf9\xcf\x54\xd4\x76\x8d\x17\x57\x08\x21\x9f\x18\x5a\x58\x52\xd9\x35\xa0\x6f\x00\xfd\xeb\x2a\x65\xed\x52\x02" +
		"\x99\x0d\x1b\x19\x9a\x77\xc3\xa8\xde\xb1\xd3\x5a\xcd\xa3\x4c\xbe\xb5\xc8\xbe\xd3\xab\x74\x65\x89\xaa\xdc\xe7\xda" +
		"\x86\xae\xc8\xae\x81\x89\x07\x03\xd7\x28\xeb\x71\xf1\x79\xd6\x35\xb0\x01\x12\x96\xa6\x5d\x63\x94\xa7\xe7\x2f\xd6" +
		"\x51\x7b\x6d\x80\x7c\xda\x35\x6c\x19\x97\x34\x5f\xf9\x1a\x86\xa2\xaf\x7c\xbd\xcd\xf2\x98\xe6\x73\x23\x55\x52\xf2" +
		"\xa3\x99\x8f\x52\xda\x35\x78\xc6\xbf\xd2\x3c\x33\x40\xdc\x35\x7e\xb6\xa1\x07\x08\xf4\xed\xc8\xc4\xd0\xf1\x01\x32" +
		"\x09\xf4\x5d\x80\x21\xf1\xf5\x11\x81\xbe\x33\xc6\xd8\x85\x8e\x17\x21\x79\xe9\xe1\xa9\x46\xd5\x47\x35\xaa\xa3\x7e" +
		"\xa9\xa1\xda\x91\x12\x99\x18\x12\x57\x1f\x11\xe8\x5b\x9f\x1c\xe8\x7a\x11\x92\x5e\x1c\xd5\xa4\xa4\x8b\x7f\xef\x6d" +
		"\xe8\x7a\x5f\x55\x38\x48\x5b\xf3\x23\x0b\x62\x1b\x20\xe0\x40\x57\xfa\x73\x1c\x7d\xe4\x40\x6f\x5c\x2a\x20\x20\x55" +
		"\x4c\x02\x1d\x5b\xb5\x99\xa5\x82\xeb\x4b\x73\x7e\x64\x5a\x10\x5b\x00\x29\xb1\xd2\x32\x2b\x2d\x19\x8f\xff\xce\xc4" +
		"\xd2\xb0\xcc\xd7\x71\x00\x02\xca\xfb\x57\x89\xad\x84\x73\x15\xdb\xb2\xbc\xf4\x4a\xbb\x01\xa6\x5d\xc3\xb5\x15\x61" +
		"\xb2\xb0\x4a\xb0\x93\x24\xd1\xa8\xba\x36\xb0\xdc\xc8\xb4\xa1\x4d\x00\x32\x7d\xd3\x82\x8e\x6f\xfa\xa6\x5f\xe8\x03" +
		"\xa0\xfe\x80\xfc\x00\xe4\x07\x7d\x20\x65\x72\x18\xcf\x24\x49\x9b\x7e\x72\x7c\x8e\x11\x1a\x4e\x2f\x80\x7a\x7b\xfd" +
		"\xc3\xce\x38\xf5\x72\xb5\x8a\xb3\xb6\x1c\xac\xc2\xae\xdf\x48\xaf\xa7\xe1\x07\x10\xd9\xc0\x41\xd0\x21\x91\x49\x20" +
		"\x31\x2d\x49\x27\x0c\x4c\x1f\x7a\x16\x20\x30\xb0\x4d\x8c\x60\xe0\x02\x4b\xd3\x48\x80\x0f\x3d\x62\xc2\x00\x48\xb1" +
		"\xa3\x34\x80\x14\xcb\x7e\x30\x90\xad\x52\x2d\xb0\x55\xbb\x2b\xcd\x49\x25\x22\xed\xb9\x30\x50\xc6\x3c\xa5\x60\x54" +
		"\x85\xaa\xaf\x2b\x1f\x05\x93\x48\x2d\x01\x57\x98\xac\x2c\xb3\x2a\x4c\xd6\x57\x87\xea\x88\x60\x44\x64\x1e\x1e\x74" +
		"\x14\x20\x2a\x31\xd3\x83\x18\x38\x10\x3b\x2a\x7e\x5b\xe3\x62\xe9\x81\x4f\x4c\x47\x8e\x50\x0f\x62\x62\x2e\xe1\x35" +
		"\xc7\x12\xa8\x06\xd9\x57\x23\xa6\xc1\xb1\x74\xe1\x11\x4b\x5a\x75\x95\x0e\x58\xa0\x76\x12\x68\xd4\x1a\xeb\xf2\xa8" +
		"\xae\xaf\x71\x6e\x1c\xe5\x18\x23\x35\xcc\xad\x72\x98\xbb\x72\x94\x43\x24\x47\xbd\x0d\x6d\x99\x8a\xe3\x69\x81\x96" +
		"\x17\x8b\x51\x0f\x11\x89\x64\xc9\x49\xac\x1c\x4f\x7d\x36\xb5\xf8\x24\x19\xaa\x35\x4b\x95\x61\x6d\x5d\xb0\x21\xf7" +
		"\xc4\x81\x78\x41\x7d\xad\x16\xac\xc7\xab\x05\xbb\xac\x05\xe7\x74\xb5\xa0\x57\x02\x17\x78\xac\xac\xb3\x35\x3e\x41" +
		"\x58\xbe\xcc\x78\x71\x82\xa8\xea\x81\x2c\x0a\xc2\xa9\x0a\x82\xcc\x0b\x82\x54\x05\x41\x9a\x16\x84\x55\x15\x84\xfd" +
		"\x24\x05\xa1\x97\xd9\x8c\x72\x4a\x3b\xcf\xb9\x9c\xe0\x96\xdf\xe2\x76\x25\x90\x5f\xd3\x51\x38\xec\x1a\xea\xea\x68" +
		"\x45\x7c\x97\x31\x5e\xc9\x55\xd5\x58\xf2\xcb\x86\x78\xd0\x49\x2d\x79\x32\xc1\x81\x29\xdf\x4d\x1c\xec\xf9\xe6\x51" +
		"\x6b\x4d\xa7\x88\x28\x70\x81\xed\x8e\x2d\xdf\xb4\xfc\xdd\x21\xe8\x15\x96\xd3\x84\x00\x6d\x07\xf8\x36\x74\x52\xb3" +
		"\x44\x05\x34\x42\x45\xaf\x33\x9c\x84\x27\x5b\x86\x84\x91\x35\x8f\xc9\x2c\x63\x02\x7b\x99\x52\xb7\xdb\x4f\x11\x93" +
		"\x45\x80\x6f\x7f\x52\x64\xed\x81\x45\xdd\x64\x3e\x49\x08\xea\x5a\x49\x9e\x1c\xd2\x12\x14\xb3\x11\x28\xfa\x4e\xab" +
		"\xa1\xae\x51\xff\xc8\x59\xc8\x7b\x29\x35\xdf\xaa\x69\xe7\xde\x30\x95\x5f\x04\x7c\xbb\xef\xa1\x6d\x41\xef\xf2\xad" +
		"\x6e\x26\xae\xb9\xbe\xa1\xc9\x7e\x7c\xd4\x38\x70\x00\x71\x6f\xa4\x7b\xef\x18\xdf\xfa\x86\xd9\x9a\xf3\xdf\xe4\x65" +
		"\x7f\x23\xef\x81\x0f\x7c\xef\xc6\xb5\x00\x71\x1b\x79\xef\xb4\xd4\xfc\xa3\xd3\x2a\xc6\xfa\x40\xce\x1b\xcb\x50\xe4" +
		"\x24\xd9\xb8\xbc\xd1\x13\x48\xad\x5d\x0c\x43\x5e\x31\xa4\xa6\xa3\xc6\xc6\xc7\x84\x48\x3d\x6d\x37\x66\xe3\xcb\xb3" +
		"\xf2\x6d\x31\x2b\xcd\xb3\x4c\xa8\x47\x6e\xcc\x1f\xb8\xb1\xb4\x75\xfe\x2e\x1c\x87\x5a\x5a\x4e\xe4\x26\x8c\xc7\xd9" +
		"\x04\x86\x71\x7c\x35\xa6\x5c\xdc\xb0\x42\x50\x4e\xf3\xf3\x57\x72\x6e\xfb\xea\x02\x24\x23\xae\xee\x6d\x80\x73\x2a" +
		"\xdb\x5f\x83\xbf\xce\xaa\x53\x7c\x94\xf1\x42\x80\x72\x12\xfc\xb9\xbc\xd7\xd5\x05\x71\x16\x8d\x06\x94\x0b\xd8\xa3" +
		"\xe2\x2a\xa5\xf2\xf0\xed\xec\x43\xac\x4d\x2e\x4d\x97\x5f\x55\x5b\xbb\xc0\x9a\x11\xa8\x50\x90\xb1\xc8\xc0\xce\x5f" +
		"\x95\x7b\x71\x65\x87\x75\xef\x32\xd9\x5d\x3e\x65\xfb\xb2\x23\xf9\x79\xdd\xfc\xf2\x33\x1a\x94\x8f\xb9\x72\x89\xfe" +
		"\x02\x7c\xc8\x38\x13\xe7\xd2\xc6\x45\xb5\x85\x48\xbf\x28\x8f\x87\x19\xe3\xa2\x0d\x5e\xcd\x1f\x62\xf2\xea\xa2\xd2" +
		"\xf8\x7b\xbe\x55\xed\xf5\x0f\x67\x8b\x47\x95\x74\x5a\xe5\x13\x4a\x5a\xea\x41\x36\xff\x0b\x00\x00\xff\xff\xc7\xa2" +
		"\xb0\x78\xd8\x46\x00\x00")

func gzipBindataDataGraphqlplaygroundhtml() (*gzipAsset, error) {
	bytes := _gzipBindataDataGraphqlplaygroundhtml
	info := gzipBindataFileInfo{
		name:        "data/graphql-playground.html",
		size:        18136,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1574050909, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

var _gzipBindataDataOpengraphtemplatehtml = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x92\x51\x6b\xc2\x30\x10\xc7\xdf\xfb\x29\xb2\x3c\xaf\x6a\xbb\xa9\x43" +
		"\x12\x61\xe8\x84\xc1\x60\x63\x28\x6c\x4f\x23\x36\x67\x7b\x90\xa6\x59\x3c\x15\x29\xfd\xee\xa3\x55\xb0\x8a\xee\x29" +
		"\xe4\xfe\xff\xdf\x8f\x7b\x38\x71\x37\x7d\x9f\xcc\xbf\x3f\x5e\x58\x46\xb9\x19\x07\xa2\x7e\x98\x51\x36\x95\x1c\x2c" +
		"\xaf\x07\xa0\xf4\x38\x60\x4c\xe4\x40\x8a\x25\x99\xf2\x6b\x20\xc9\x17\xf3\x59\xf8\xc4\x4f\x81\x55\x39\x48\xbe\x45" +
		"\xd8\xb9\xc2\x13\x67\x49\x61\x09\x2c\x49\xbe\x43\x4d\x99\xd4\xb0\xc5\x04\xc2\xe6\x73\xcf\xd0\x22\xa1\x32\xe1\x3a" +
		"\x51\x06\x64\xd4\xe9\xb5\x44\x19\x91\x0b\xe1\x77\x83\x5b\xc9\xbf\xc2\xc5\x73\x38\x29\x72\xa7\x08\x97\x06\x5a\x56" +
		"\x04\x09\x3a\x85\x16\xe7\x7c\xe1\xc0\xd3\x5e\xf2\xd5\x72\xa4\x9c\xfb\x41\xdd\xea\x47\x0f\xc3\x7e\x14\x0d\x7b\x8f" +
		"\xf1\xa0\x3f\x88\xe3\xf8\x2a\x58\xa4\xa3\x8d\x37\x2d\xaa\x2c\x3b\x8b\xcf\xb7\xaa\xba\xd5\xa6\xbd\x83\xf3\xfa\x7c" +
		"\xef\xe0\x9f\x3e\x92\xb9\x04\xea\xd1\x6d\x42\xc3\x3a\xf1\xe8\x08\x0b\x7b\xce\x4d\x4f\xc1\x91\x2e\x4b\x5c\xb1\xce" +
		"\x0c\x14\x6d\x3c\xe8\xd7\x5c\xa5\x50\x55\x01\x63\x57\xbd\x58\xc7\xe7\xc6\x0b\xf2\xe8\x04\xab\x1b\x8b\x68\x76\x1f" +
		"\x9f\x36\x16\xdd\xc3\x24\x10\xdd\xc3\x89\x88\x6e\x73\x42\x7f\x01\x00\x00\xff\xff\xb1\x8c\x16\x0a\x52\x02\x00\x00" +
		"")

func gzipBindataDataOpengraphtemplatehtml() (*gzipAsset, error) {
	bytes := _gzipBindataDataOpengraphtemplatehtml
	info := gzipBindataFileInfo{
		name:        "data/opengraph-template.html",
		size:        594,
		md5checksum: "",
		mode:        os.FileMode(420),
		modTime:     time.Unix(1572847808, 0),
	}

	a := &gzipAsset{bytes: bytes, info: info}

	return a, nil
}

// GzipAsset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func GzipAsset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAsset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustGzipAsset is like GzipAsset but panics when GzipAsset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustGzipAsset(name string) []byte {
	a, err := GzipAsset(name)
	if err != nil {
		panic("asset: GzipAsset(" + name + "): " + err.Error())
	}

	return a
}

// GzipAssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
func GzipAssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _gzipbindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("GzipAssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// GzipAssetNames returns the names of the assets.
// nolint: deadcode
func GzipAssetNames() []string {
	names := make([]string, 0, len(_gzipbindata))
	for name := range _gzipbindata {
		names = append(names, name)
	}
	return names
}

//
// _gzipbindata is a table, holding each asset generator, mapped to its name.
//
var _gzipbindata = map[string]func() (*gzipAsset, error){
	"data/graphql-playground.html": gzipBindataDataGraphqlplaygroundhtml,
	"data/opengraph-template.html": gzipBindataDataOpengraphtemplatehtml,
}

// GzipAssetDir returns the file names below a certain
// directory embedded in the file by bindata.
// For example if you run bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then GzipAssetDir("data") would return []string{"foo.txt", "img"}
// GzipAssetDir("data/img") would return []string{"a.png", "b.png"}
// GzipAssetDir("foo.txt") and GzipAssetDir("notexist") would return an error
// GzipAssetDir("") will return []string{"data"}.
func GzipAssetDir(name string) ([]string, error) {
	node := _gzipbintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op:   "open",
					Path: name,
					Err:  os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op:   "open",
			Path: name,
			Err:  os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type gzipBintree struct {
	Func     func() (*gzipAsset, error)
	Children map[string]*gzipBintree
}

var _gzipbintree = &gzipBintree{Func: nil, Children: map[string]*gzipBintree{
	"data": {Func: nil, Children: map[string]*gzipBintree{
		"graphql-playground.html": {Func: gzipBindataDataGraphqlplaygroundhtml, Children: map[string]*gzipBintree{}},
		"opengraph-template.html": {Func: gzipBindataDataOpengraphtemplatehtml, Children: map[string]*gzipBintree{}},
	}},
}}
